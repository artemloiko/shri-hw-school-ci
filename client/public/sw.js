try{self["workbox:precaching:5.1.3"]&&_()}catch(e){}try{self["workbox:core:5.1.3"]&&_()}catch(e){}const e={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},t=t=>[e.prefix,t,e.suffix].filter(e=>e&&e.length>0).join("-"),a=a=>a||t(e.runtime),s=e=>new URL(String(e),location.href).href.replace(new RegExp("^"+location.origin),""),r=(()=>{"__WB_DISABLE_DEV_LOGS"in self||(self.__WB_DISABLE_DEV_LOGS=!1);let e=!1;const t={debug:"#7f8c8d",log:"#2ecc71",warn:"#f39c12",error:"#c0392b",groupCollapsed:"#3498db",groupEnd:null},a=function(a,s){if(self.__WB_DISABLE_DEV_LOGS)return;if("groupCollapsed"===a&&/^((?!chrome|android).)*safari/i.test(navigator.userAgent))return void console[a](...s);const r=e?[]:["%cworkbox",["background: "+t[a],"border-radius: 0.5em","color: white","font-weight: bold","padding: 2px 0.5em"].join(";")];console[a](...r,...s),"groupCollapsed"===a&&(e=!0),"groupEnd"===a&&(e=!1)},s={},r=Object.keys(t);for(const e of r){const t=e;s[t]=(...e)=>{a(t,e)}}return s})(),n={"invalid-value":({paramName:e,validValueDescription:t,value:a})=>{if(!e||!t)throw new Error("Unexpected input to 'invalid-value' error.");return`The '${e}' parameter was given a value with an unexpected value. ${t} Received a value of `+JSON.stringify(a)+"."},"not-an-array":({moduleName:e,className:t,funcName:a,paramName:s})=>{if(!(e&&t&&a&&s))throw new Error("Unexpected input to 'not-an-array' error.");return`The parameter '${s}' passed into '${e}.${t}.${a}()' must be an array.`},"incorrect-type":({expectedType:e,paramName:t,moduleName:a,className:s,funcName:r})=>{if(!(e&&t&&a&&r))throw new Error("Unexpected input to 'incorrect-type' error.");return`The parameter '${t}' passed into '${a}.${s?s+".":""}${r}()' must be of type ${e}.`},"incorrect-class":({expectedClass:e,paramName:t,moduleName:a,className:s,funcName:r,isReturnValueProblem:n})=>{if(!e||!a||!r)throw new Error("Unexpected input to 'incorrect-class' error.");return n?`The return value from '${a}.${s?s+".":""}${r}()' must be an instance of class ${e.name}.`:`The parameter '${t}' passed into '${a}.${s?s+".":""}${r}()' must be an instance of class ${e.name}.`},"missing-a-method":({expectedMethod:e,paramName:t,moduleName:a,className:s,funcName:r})=>{if(!(e&&t&&a&&s&&r))throw new Error("Unexpected input to 'missing-a-method' error.");return`${a}.${s}.${r}() expected the '${t}' parameter to expose a '${e}' method.`},"add-to-cache-list-unexpected-type":({entry:e})=>`An unexpected entry was passed to 'workbox-precaching.PrecacheController.addToCacheList()' The entry '${JSON.stringify(e)}' isn't supported. You must supply an array of strings with one or more characters, objects with a url property or Request objects.`,"add-to-cache-list-conflicting-entries":({firstEntry:e,secondEntry:t})=>{if(!e||!t)throw new Error("Unexpected input to 'add-to-cache-list-duplicate-entries' error.");return"Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL "+e._entryId+" but different revision details. Workbox is unable to cache and version the asset correctly. Please remove one of the entries."},"plugin-error-request-will-fetch":({thrownError:e})=>{if(!e)throw new Error("Unexpected input to 'plugin-error-request-will-fetch', error.");return`An error was thrown by a plugins 'requestWillFetch()' method. The thrown error message was: '${e.message}'.`},"invalid-cache-name":({cacheNameId:e,value:t})=>{if(!e)throw new Error("Expected a 'cacheNameId' for error 'invalid-cache-name'");return`You must provide a name containing at least one character for setCacheDetails({${e}: '...'}). Received a value of '${JSON.stringify(t)}'`},"unregister-route-but-not-found-with-method":({method:e})=>{if(!e)throw new Error("Unexpected input to 'unregister-route-but-not-found-with-method' error.");return`The route you're trying to unregister was not  previously registered for the method type '${e}'.`},"unregister-route-route-not-registered":()=>"The route you're trying to unregister was not previously registered.","queue-replay-failed":({name:e})=>`Replaying the background sync queue '${e}' failed.`,"duplicate-queue-name":({name:e})=>`The Queue name '${e}' is already being used. All instances of backgroundSync.Queue must be given unique names.`,"expired-test-without-max-age":({methodName:e,paramName:t})=>`The '${e}()' method can only be used when the '${t}' is used in the constructor.`,"unsupported-route-type":({moduleName:e,className:t,funcName:a,paramName:s})=>`The supplied '${s}' parameter was an unsupported type. Please check the docs for ${e}.${t}.${a} for valid input types.`,"not-array-of-class":({value:e,expectedClass:t,moduleName:a,className:s,funcName:r,paramName:n})=>`The supplied '${n}' parameter must be an array of '${t}' objects. Received '${JSON.stringify(e)},'. Please check the call to ${a}.${s}.${r}() to fix the issue.`,"max-entries-or-age-required":({moduleName:e,className:t,funcName:a})=>`You must define either config.maxEntries or config.maxAgeSecondsin ${e}.${t}.${a}`,"statuses-or-headers-required":({moduleName:e,className:t,funcName:a})=>`You must define either config.statuses or config.headersin ${e}.${t}.${a}`,"invalid-string":({moduleName:e,funcName:t,paramName:a})=>{if(!a||!e||!t)throw new Error("Unexpected input to 'invalid-string' error.");return`When using strings, the '${a}' parameter must start with 'http' (for cross-origin matches) or '/' (for same-origin matches). Please see the docs for ${e}.${t}() for more info.`},"channel-name-required":()=>"You must provide a channelName to construct a BroadcastCacheUpdate instance.","invalid-responses-are-same-args":()=>"The arguments passed into responsesAreSame() appear to be invalid. Please ensure valid Responses are used.","expire-custom-caches-only":()=>"You must provide a 'cacheName' property when using the expiration plugin with a runtime caching strategy.","unit-must-be-bytes":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'unit-must-be-bytes' error.");return`The 'unit' portion of the Range header must be set to 'bytes'. The Range header provided was "${e}"`},"single-range-only":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'single-range-only' error.");return`Multiple ranges are not supported. Please use a  single start value, and optional end value. The Range header provided was "${e}"`},"invalid-range-values":({normalizedRangeHeader:e})=>{if(!e)throw new Error("Unexpected input to 'invalid-range-values' error.");return`The Range header is missing both start and end values. At least one of those values is needed. The Range header provided was "${e}"`},"no-range-header":()=>"No Range header was found in the Request provided.","range-not-satisfiable":({size:e,start:t,end:a})=>`The start (${t}) and end (${a}) values in the Range are not satisfiable by the cached response, which is ${e} bytes.`,"attempt-to-cache-non-get-request":({url:e,method:t})=>`Unable to cache '${e}' because it is a '${t}' request and only 'GET' requests can be cached.`,"cache-put-with-no-response":({url:e})=>`There was an attempt to cache '${e}' but the response was not defined.`,"no-response":({url:e,error:t})=>{let a=`The strategy could not generate a response for '${e}'.`;return t&&(a+=` The underlying error is ${t}.`),a},"bad-precaching-response":({url:e,status:t})=>`The precaching request for '${e}' failed with an HTTP status of ${t}.`,"non-precached-url":({url:e})=>`createHandlerBoundToURL('${e}') was called, but that URL is not precached. Please pass in a URL that is precached instead.`,"add-to-cache-list-conflicting-integrities":({url:e})=>"Two of the entries passed to 'workbox-precaching.PrecacheController.addToCacheList()' had the URL "+e+" with different integrity values. Please remove one of them.","missing-precache-entry":({cacheName:e,url:t})=>`Unable to find a precached response in ${e} for ${t}.`},o=(e,t={})=>{const a=n[e];if(!a)throw new Error(`Unable to find message for code '${e}'.`);return a(t)};class i extends Error{constructor(e,t){super(o(e,t)),this.name=e,this.details=t}}const c=(e,t,a)=>{if("function"!==typeof e[t])throw a.expectedMethod=t,new i("missing-a-method",a)},u=(e,t)=>{if(!Array.isArray(e))throw new i("not-an-array",t)},l=(e,t,a)=>{if(!(e instanceof t))throw a.expectedClass=t,new i("incorrect-class",a)},h=(e,t,a)=>{if(!t.includes(e))throw a.validValueDescription=`Valid values are ${JSON.stringify(t)}.`,new i("invalid-value",a)},d=(e,t,a)=>{if(typeof e!==t)throw a.expectedType=t,new i("incorrect-type",a)},m=new Set;const p=(e,t)=>e.filter(e=>t in e),g=async({request:e,mode:t,plugins:a=[]})=>{const s=p(a,"cacheKeyWillBeUsed");let r=e;for(const e of s)r=await e.cacheKeyWillBeUsed.call(e,{mode:t,request:r}),"string"==typeof r&&(r=new Request(r)),l(r,Request,{moduleName:"Plugin",funcName:"cacheKeyWillBeUsed",isReturnValueProblem:!0});return r},f=async({cacheName:e,request:t,event:a,matchOptions:s,plugins:n=[]})=>{const o=await self.caches.open(e),i=await g({plugins:n,request:t,mode:"read"});let c=await o.match(i,s);c?r.debug(`Found a cached response in '${e}'.`):r.debug(`No cached response found in '${e}'.`);for(const t of n)if("cachedResponseWillBeUsed"in t){const r=t.cachedResponseWillBeUsed;c=await r.call(t,{cacheName:e,event:a,matchOptions:s,cachedResponse:c,request:i}),c&&l(c,Response,{moduleName:"Plugin",funcName:"cachedResponseWillBeUsed",isReturnValueProblem:!0})}return c},w=async({cacheName:e,request:t,response:a,event:n,plugins:o=[],matchOptions:c})=>{if(t.method&&"GET"!==t.method)throw new i("attempt-to-cache-non-get-request",{url:s(t.url),method:t.method});const u=await g({plugins:o,request:t,mode:"write"});if(!a)throw r.error(`Cannot cache non-existent response for '${s(u.url)}'.`),new i("cache-put-with-no-response",{url:s(u.url)});const h=await(async({request:e,response:t,event:a,plugins:s=[]})=>{let n=t,o=!1;for(const t of s)if("cacheWillUpdate"in t){o=!0;const s=t.cacheWillUpdate;if(n=await s.call(t,{request:e,response:n,event:a}),n&&l(n,Response,{moduleName:"Plugin",funcName:"cacheWillUpdate",isReturnValueProblem:!0}),!n)break}return o||(n&&200!==n.status&&(0===n.status?r.warn(`The response for '${e.url}' is an opaque response. The caching strategy that you're using will not cache opaque responses by default.`):r.debug(`The response for '${e.url}' returned a status code of '${t.status}' and won't be cached as a result.`)),n=n&&200===n.status?n:void 0),n||null})({event:n,plugins:o,response:a,request:u});if(!h)return void r.debug(`Response '${s(u.url)}' will not be cached.`,h);const d=await self.caches.open(e),w=p(o,"cacheDidUpdate"),N=w.length>0?await f({cacheName:e,matchOptions:c,request:u}):null;r.debug(`Updating the '${e}' cache with a new Response for `+s(u.url)+".");try{await d.put(u,h)}catch(e){throw"QuotaExceededError"===e.name&&await async function(){r.log(`About to run ${m.size} callbacks to clean up caches.`);for(const e of m)await e(),r.log(e,"is complete.");r.log("Finished running callbacks.")}(),e}for(const t of w)await t.cacheDidUpdate.call(t,{cacheName:e,event:n,oldResponse:N,newResponse:h,request:u})},N=f,b=async({request:e,fetchOptions:t,event:a,plugins:n=[]})=>{if("string"==typeof e&&(e=new Request(e)),a instanceof FetchEvent&&a.preloadResponse){const t=await a.preloadResponse;if(t)return r.log(`Using a preloaded navigation response for '${s(e.url)}'`),t}l(e,Request,{paramName:"request",expectedClass:Request,moduleName:"workbox-core",className:"fetchWrapper",funcName:"wrappedFetch"});const o=p(n,"fetchDidFail"),c=o.length>0?e.clone():null;try{for(const t of n)if("requestWillFetch"in t){const s=t.requestWillFetch,r=e.clone();(e=await s.call(t,{request:r,event:a}))&&l(e,Request,{moduleName:"Plugin",funcName:"cachedResponseWillBeUsed",isReturnValueProblem:!0})}}catch(e){throw new i("plugin-error-request-will-fetch",{thrownError:e})}const u=e.clone();try{let o;o="navigate"===e.mode?await fetch(e):await fetch(e,t),r.debug(`Network request for '${s(e.url)}' returned a response with status '${o.status}'.`);for(const e of n)"fetchDidSucceed"in e&&(o=await e.fetchDidSucceed.call(e,{event:a,request:u,response:o}),o&&l(o,Response,{moduleName:"Plugin",funcName:"fetchDidSucceed",isReturnValueProblem:!0}));return o}catch(t){r.error(`Network request for '${s(e.url)}' threw an error.`,t);for(const e of o)await e.fetchDidFail.call(e,{error:t,event:a,originalRequest:c.clone(),request:u.clone()});throw t}};try{self["workbox:strategies:5.1.3"]&&_()}catch(e){}const x=(e,t)=>`Using ${e} to respond to '${s(t.url)}'`,y=e=>{e&&(r.groupCollapsed("View the final response here."),r.log(e||"[No response returned]"),r.groupEnd())};class R{constructor(e={}){this._cacheName=a(e.cacheName),this._plugins=e.plugins||[],this._fetchOptions=e.fetchOptions,this._matchOptions=e.matchOptions}async handle({event:e,request:t}){const a=[];"string"==typeof t&&(t=new Request(t)),l(t,Request,{moduleName:"workbox-strategies",className:"CacheFirst",funcName:"makeRequest",paramName:"request"});let s,n=await N({cacheName:this._cacheName,request:t,event:e,matchOptions:this._matchOptions,plugins:this._plugins});if(n)a.push(`Found a cached response in the '${this._cacheName}' cache.`);else{a.push(`No response found in the '${this._cacheName}' cache. Will respond with a network request.`);try{n=await this._getFromNetwork(t,e)}catch(e){s=e}n?a.push("Got response from network."):a.push("Unable to get a response from the network.")}r.groupCollapsed(x("CacheFirst",t));for(const e of a)r.log(e);if(y(n),r.groupEnd(),!n)throw new i("no-response",{url:t.url,error:s});return n}async _getFromNetwork(e,t){const a=await b({request:e,event:t,fetchOptions:this._fetchOptions,plugins:this._plugins}),n=a.clone(),o=w({cacheName:this._cacheName,request:e,response:n,event:t,plugins:this._plugins});if(t)try{t.waitUntil(o)}catch(t){r.warn(`Unable to ensure service worker stays alive when updating cache for '${s(e.url)}'.`)}return a}}const v={cacheWillUpdate:async({response:e})=>200===e.status||0===e.status?e:null};class E{constructor(e={}){if(this._cacheName=a(e.cacheName),e.plugins){const t=e.plugins.some(e=>!!e.cacheWillUpdate);this._plugins=t?e.plugins:[v,...e.plugins]}else this._plugins=[v];this._networkTimeoutSeconds=e.networkTimeoutSeconds||0,this._networkTimeoutSeconds&&d(this._networkTimeoutSeconds,"number",{moduleName:"workbox-strategies",className:"NetworkFirst",funcName:"constructor",paramName:"networkTimeoutSeconds"}),this._fetchOptions=e.fetchOptions,this._matchOptions=e.matchOptions}async handle({event:e,request:t}){const a=[];"string"==typeof t&&(t=new Request(t)),l(t,Request,{moduleName:"workbox-strategies",className:"NetworkFirst",funcName:"handle",paramName:"makeRequest"});const s=[];let n;if(this._networkTimeoutSeconds){const{id:r,promise:o}=this._getTimeoutPromise({request:t,event:e,logs:a});n=r,s.push(o)}const o=this._getNetworkPromise({timeoutId:n,request:t,event:e,logs:a});s.push(o);let c=await Promise.race(s);c||(c=await o),r.groupCollapsed(x("NetworkFirst",t));for(const e of a)r.log(e);if(y(c),r.groupEnd(),!c)throw new i("no-response",{url:t.url});return c}_getTimeoutPromise({request:e,logs:t,event:a}){let s;return{promise:new Promise(r=>{s=setTimeout(async()=>{t.push("Timing out the network response at "+this._networkTimeoutSeconds+" seconds."),r(await this._respondFromCache({request:e,event:a}))},1e3*this._networkTimeoutSeconds)}),id:s}}async _getNetworkPromise({timeoutId:e,request:t,logs:a,event:n}){let o,i;try{i=await b({request:t,event:n,fetchOptions:this._fetchOptions,plugins:this._plugins})}catch(e){o=e}if(e&&clearTimeout(e),i?a.push("Got response from network."):a.push("Unable to get a response from the network. Will respond with a cached response."),o||!i)i=await this._respondFromCache({request:t,event:n}),i?a.push(`Found a cached response in the '${this._cacheName}' cache.`):a.push(`No response found in the '${this._cacheName}' cache.`);else{const e=i.clone(),a=w({cacheName:this._cacheName,request:t,response:e,event:n,plugins:this._plugins});if(n)try{n.waitUntil(a)}catch(e){r.warn(`Unable to ensure service worker stays alive when updating cache for '${s(t.url)}'.`)}}return i}_respondFromCache({event:e,request:t}){return N({cacheName:this._cacheName,request:t,event:e,matchOptions:this._matchOptions,plugins:this._plugins})}}try{self["workbox:routing:5.1.3"]&&_()}catch(e){}const q=["DELETE","GET","HEAD","PATCH","POST","PUT"],$=e=>e&&"object"==typeof e?(c(e,"handle",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),e):(d(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"handler"}),{handle:e});class k{constructor(e,t,a="GET"){d(e,"function",{moduleName:"workbox-routing",className:"Route",funcName:"constructor",paramName:"match"}),a&&h(a,q,{paramName:"method"}),this.handler=$(t),this.match=e,this.method=a}}class T extends k{constructor(e,t,a){l(e,RegExp,{moduleName:"workbox-routing",className:"RegExpRoute",funcName:"constructor",paramName:"pattern"});super(({url:t})=>{const a=e.exec(t.href);if(a){if(t.origin===location.origin||0===a.index)return a.slice(1);r.debug(`The regular expression '${e}' only partially matched against the cross-origin URL '${t}'. RegExpRoute's will only handle cross-origin requests if they match the entire URL.`)}},t,a)}}class U{constructor(){this._routes=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",e=>{const{request:t}=e,a=this.handleRequest({request:t,event:e});a&&e.respondWith(a)})}addCacheListener(){self.addEventListener("message",e=>{if(e.data&&"CACHE_URLS"===e.data.type){const{payload:t}=e.data;r.debug("Caching URLs from the window",t.urlsToCache);const a=Promise.all(t.urlsToCache.map(e=>{"string"==typeof e&&(e=[e]);const t=new Request(...e);return this.handleRequest({request:t})}));e.waitUntil(a),e.ports&&e.ports[0]&&a.then(()=>e.ports[0].postMessage(!0))}})}handleRequest({request:e,event:t}){l(e,Request,{moduleName:"workbox-routing",className:"Router",funcName:"handleRequest",paramName:"options.request"});const a=new URL(e.url,location.href);if(!a.protocol.startsWith("http"))return void r.debug("Workbox Router only supports URLs that start with 'http'.");const{params:n,route:o}=this.findMatchingRoute({url:a,request:e,event:t});let i=o&&o.handler;const c=[];if(i&&(c.push(["Found a route to handle this request:",o]),n&&c.push(["Passing the following params to the route's handler:",n])),!i&&this._defaultHandler&&(c.push("Failed to find a matching route. Falling back to the default handler."),i=this._defaultHandler),!i)return void r.debug("No route found for: "+s(a));let u;r.groupCollapsed("Router is responding to: "+s(a)),c.forEach(e=>{Array.isArray(e)?r.log(...e):r.log(e)}),r.groupEnd();try{u=i.handle({url:a,request:e,event:t,params:n})}catch(e){u=Promise.reject(e)}return u instanceof Promise&&this._catchHandler&&(u=u.catch(n=>(r.groupCollapsed(`Error thrown when responding to:  ${s(a)}. Falling back to Catch Handler.`),r.error("Error thrown by:",o),r.error(n),r.groupEnd(),this._catchHandler.handle({url:a,request:e,event:t})))),u}findMatchingRoute({url:e,request:t,event:a}){l(e,URL,{moduleName:"workbox-routing",className:"Router",funcName:"findMatchingRoute",paramName:"options.url"}),l(t,Request,{moduleName:"workbox-routing",className:"Router",funcName:"findMatchingRoute",paramName:"options.request"});const s=this._routes.get(t.method)||[];for(const r of s){let s;const n=r.match({url:e,request:t,event:a});if(n)return s=n,(Array.isArray(n)&&0===n.length||n.constructor===Object&&0===Object.keys(n).length||"boolean"==typeof n)&&(s=void 0),{route:r,params:s}}return{}}setDefaultHandler(e){this._defaultHandler=$(e)}setCatchHandler(e){this._catchHandler=$(e)}registerRoute(e){d(e,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),c(e,"match",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),d(e.handler,"object",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route"}),c(e.handler,"handle",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.handler"}),d(e.method,"string",{moduleName:"workbox-routing",className:"Router",funcName:"registerRoute",paramName:"route.method"}),this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new i("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(!(t>-1))throw new i("unregister-route-route-not-registered");this._routes.get(e.method).splice(t,1)}}let S;const C=()=>(S||(S=new U,S.addFetchListener(),S.addCacheListener()),S);function A(e,t,a){let s;if("string"==typeof e){const n=new URL(e,location.href);{if(!e.startsWith("/")&&!e.startsWith("http"))throw new i("invalid-string",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});const t=e.startsWith("http")?n.pathname:e,a="[*:?+]";new RegExp(""+a).exec(t)&&r.debug(`The '$capture' parameter contains an Express-style wildcard character (${a}). Strings are now always interpreted as exact matches; use a RegExp for partial or wildcard matches.`)}s=new k(({url:t})=>(t.pathname===n.pathname&&t.origin!==n.origin&&r.debug(e+" only partially matches the cross-origin URL "+t+". This route will only handle cross-origin requests if they match the entire URL."),t.href===n.href),t,a)}else if(e instanceof RegExp)s=new T(e,t,a);else if("function"==typeof e)s=new k(e,t,a);else{if(!(e instanceof k))throw new i("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});s=e}return C().registerRoute(s),s}try{self["workbox:cacheable-response:5.1.3"]&&_()}catch(e){}class P{constructor(e={}){if(!e.statuses&&!e.headers)throw new i("statuses-or-headers-required",{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor"});e.statuses&&u(e.statuses,{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor",paramName:"config.statuses"}),e.headers&&d(e.headers,"object",{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"constructor",paramName:"config.headers"}),this._statuses=e.statuses,this._headers=e.headers}isResponseCacheable(e){l(e,Response,{moduleName:"workbox-cacheable-response",className:"CacheableResponse",funcName:"isResponseCacheable",paramName:"response"});let t=!0;if(this._statuses&&(t=this._statuses.includes(e.status)),this._headers&&t&&(t=Object.keys(this._headers).some(t=>e.headers.get(t)===this._headers[t])),!t){r.groupCollapsed(`The request for '${s(e.url)}' returned a response that does not meet the criteria for being cached.`),r.groupCollapsed("View cacheability criteria here."),r.log("Cacheable statuses: "+JSON.stringify(this._statuses)),r.log("Cacheable headers: "+JSON.stringify(this._headers,null,2)),r.groupEnd();const t={};e.headers.forEach((e,a)=>{t[a]=e}),r.groupCollapsed("View response status and headers here."),r.log("Response status: "+e.status),r.log("Response headers: "+JSON.stringify(t,null,2)),r.groupEnd(),r.groupCollapsed("View full response details here."),r.log(e.headers),r.log(e),r.groupEnd(),r.groupEnd()}return t}}class O{constructor(e){this.cacheWillUpdate=async({response:e})=>this._cacheableResponse.isResponseCacheable(e)?e:null,this._cacheableResponse=new P(e)}}function L(e){e.then(()=>{})}class D{constructor(e,t,{onupgradeneeded:a,onversionchange:s}={}){this._db=null,this._name=e,this._version=t,this._onupgradeneeded=a,this._onversionchange=s||(()=>this.close())}get db(){return this._db}async open(){if(!this._db)return this._db=await new Promise((e,t)=>{let a=!1;setTimeout(()=>{a=!0,t(new Error("The open request was blocked and timed out"))},this.OPEN_TIMEOUT);const s=indexedDB.open(this._name,this._version);s.onerror=()=>t(s.error),s.onupgradeneeded=e=>{a?(s.transaction.abort(),s.result.close()):"function"==typeof this._onupgradeneeded&&this._onupgradeneeded(e)},s.onsuccess=()=>{const t=s.result;a?t.close():(t.onversionchange=this._onversionchange.bind(this),e(t))}}),this}async getKey(e,t){return(await this.getAllKeys(e,t,1))[0]}async getAll(e,t,a){return await this.getAllMatching(e,{query:t,count:a})}async getAllKeys(e,t,a){return(await this.getAllMatching(e,{query:t,count:a,includeKeys:!0})).map(e=>e.key)}async getAllMatching(e,{index:t,query:a=null,direction:s="next",count:r,includeKeys:n=!1}={}){return await this.transaction([e],"readonly",(o,i)=>{const c=o.objectStore(e),u=t?c.index(t):c,l=[],h=u.openCursor(a,s);h.onsuccess=()=>{const e=h.result;e?(l.push(n?e:e.value),r&&l.length>=r?i(l):e.continue()):i(l)}})}async transaction(e,t,a){return await this.open(),await new Promise((s,r)=>{const n=this._db.transaction(e,t);n.onabort=()=>r(n.error),n.oncomplete=()=>s(),a(n,e=>s(e))})}async _call(e,t,a,...s){return await this.transaction([t],a,(a,r)=>{const n=a.objectStore(t),o=n[e].apply(n,s);o.onsuccess=()=>r(o.result)})}close(){this._db&&(this._db.close(),this._db=null)}}D.prototype.OPEN_TIMEOUT=2e3;const W={readonly:["get","count","getKey","getAll","getAllKeys"],readwrite:["add","put","clear","delete"]};for(const[e,t]of Object.entries(W))for(const a of t)a in IDBObjectStore.prototype&&(D.prototype[a]=async function(t,...s){return await this._call(a,t,e,...s)});try{self["workbox:expiration:5.1.3"]&&_()}catch(e){}const F=e=>{const t=new URL(e,location.href);return t.hash="",t.href};class M{constructor(e){this._cacheName=e,this._db=new D("workbox-expiration",1,{onupgradeneeded:e=>this._handleUpgrade(e)})}_handleUpgrade(e){const t=e.target.result.createObjectStore("cache-entries",{keyPath:"id"});t.createIndex("cacheName","cacheName",{unique:!1}),t.createIndex("timestamp","timestamp",{unique:!1}),(async e=>{await new Promise((t,a)=>{const s=indexedDB.deleteDatabase(e);s.onerror=()=>{a(s.error)},s.onblocked=()=>{a(new Error("Delete blocked"))},s.onsuccess=()=>{t()}})})(this._cacheName)}async setTimestamp(e,t){const a={url:e=F(e),timestamp:t,cacheName:this._cacheName,id:this._getId(e)};await this._db.put("cache-entries",a)}async getTimestamp(e){return(await this._db.get("cache-entries",this._getId(e))).timestamp}async expireEntries(e,t){const a=await this._db.transaction("cache-entries","readwrite",(a,s)=>{const r=a.objectStore("cache-entries").index("timestamp").openCursor(null,"prev"),n=[];let o=0;r.onsuccess=()=>{const a=r.result;if(a){const s=a.value;s.cacheName===this._cacheName&&(e&&s.timestamp<e||t&&o>=t?n.push(a.value):o++),a.continue()}else s(n)}}),s=[];for(const e of a)await this._db.delete("cache-entries",e.id),s.push(e.url);return s}_getId(e){return this._cacheName+"|"+F(e)}}class j{constructor(e,t={}){if(this._isRunning=!1,this._rerunRequested=!1,d(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"cacheName"}),!t.maxEntries&&!t.maxAgeSeconds)throw new i("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor"});t.maxEntries&&d(t.maxEntries,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxEntries"}),t.maxAgeSeconds&&d(t.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._maxEntries=t.maxEntries,this._maxAgeSeconds=t.maxAgeSeconds,this._cacheName=e,this._timestampModel=new M(e)}async expireEntries(){if(this._isRunning)return void(this._rerunRequested=!0);this._isRunning=!0;const e=this._maxAgeSeconds?Date.now()-1e3*this._maxAgeSeconds:0,t=await this._timestampModel.expireEntries(e,this._maxEntries),a=await self.caches.open(this._cacheName);for(const e of t)await a.delete(e);t.length>0?(r.groupCollapsed(`Expired ${t.length} `+(1===t.length?"entry":"entries")+" and removed "+(1===t.length?"it":"them")+" from the "+`'${this._cacheName}' cache.`),r.log(`Expired the following ${1===t.length?"URL":"URLs"}:`),t.forEach(e=>r.log("    "+e)),r.groupEnd()):r.debug("Cache expiration ran and found no entries to remove."),this._isRunning=!1,this._rerunRequested&&(this._rerunRequested=!1,L(this.expireEntries()))}async updateTimestamp(e){d(e,"string",{moduleName:"workbox-expiration",className:"CacheExpiration",funcName:"updateTimestamp",paramName:"url"}),await this._timestampModel.setTimestamp(e,Date.now())}async isURLExpired(e){if(this._maxAgeSeconds){return await this._timestampModel.getTimestamp(e)<Date.now()-1e3*this._maxAgeSeconds}throw new i("expired-test-without-max-age",{methodName:"isURLExpired",paramName:"maxAgeSeconds"})}async delete(){this._rerunRequested=!1,await this._timestampModel.expireEntries(1/0)}}class B{constructor(e={}){if(this.cachedResponseWillBeUsed=async({event:e,request:t,cacheName:a,cachedResponse:n})=>{if(!n)return null;const o=this._isResponseDateFresh(n),i=this._getCacheExpiration(a);L(i.expireEntries());const c=i.updateTimestamp(t.url);if(e)try{e.waitUntil(c)}catch(t){"request"in e&&r.warn(`Unable to ensure service worker stays alive when updating cache entry for '${s(e.request.url)}'.`)}return o?n:null},this.cacheDidUpdate=async({cacheName:e,request:t})=>{d(e,"string",{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"cacheName"}),l(t,Request,{moduleName:"workbox-expiration",className:"Plugin",funcName:"cacheDidUpdate",paramName:"request"});const a=this._getCacheExpiration(e);await a.updateTimestamp(t.url),await a.expireEntries()},!e.maxEntries&&!e.maxAgeSeconds)throw new i("max-entries-or-age-required",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor"});var t;e.maxEntries&&d(e.maxEntries,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxEntries"}),e.maxAgeSeconds&&d(e.maxAgeSeconds,"number",{moduleName:"workbox-expiration",className:"Plugin",funcName:"constructor",paramName:"config.maxAgeSeconds"}),this._config=e,this._maxAgeSeconds=e.maxAgeSeconds,this._cacheExpirations=new Map,e.purgeOnQuotaError&&(d(t=()=>this.deleteCacheAndMetadata(),"function",{moduleName:"workbox-core",funcName:"register",paramName:"callback"}),m.add(t),r.log("Registered a callback to respond to quota errors.",t))}_getCacheExpiration(e){if(e===a())throw new i("expire-custom-caches-only");let t=this._cacheExpirations.get(e);return t||(t=new j(e,this._config),this._cacheExpirations.set(e,t)),t}_isResponseDateFresh(e){if(!this._maxAgeSeconds)return!0;const t=this._getDateHeaderTimestamp(e);return null===t||t>=Date.now()-1e3*this._maxAgeSeconds}_getDateHeaderTimestamp(e){if(!e.headers.has("date"))return null;const t=e.headers.get("date"),a=new Date(t).getTime();return isNaN(a)?null:a}async deleteCacheAndMetadata(){for(const[e,t]of this._cacheExpirations)await self.caches.delete(e),await t.delete();this._cacheExpirations=new Map}}const I=[{url:"/manifest.json",revision:"1"},{url:"/favicon.ico",revision:"1"},{url:"/logo192.png",revision:"1"},{url:"/logo512.png",revision:"1"}],H=[...self.__WB_MANIFEST||[],...I];A(/\/api\/(settings|builds)(\?.+)?$/,new E({networkTimeoutSeconds:2})),A(/\/api\/builds\/[\w-]+$/,new E({networkTimeoutSeconds:2})),A(/\/api\/builds\/.+\/logs/,new R({cacheName:"api-cachedonly-get-requests",plugins:[new O({statuses:[200]}),new B({purgeOnQuotaError:!0,maxEntries:100})]})),A(/^https:\/\/yastatic\.net/,new R({cacheName:"yastatic-fonts",plugins:[new O({statuses:[0,200]}),new B({maxAgeSeconds:31536e3,maxEntries:30})]})),self.addEventListener("install",e=>{console.log("sw installed, assetsToCache:",H)}),self.addEventListener("message",e=>{console.log("SW MESSAGE",e.data),e.data&&"SKIP_WAITING"===e.data.type&&self.skipWaiting()});
